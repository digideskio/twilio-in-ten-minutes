h1. Twilio In Ten Minutes

This is the companion source code for the blog post / guide:  "Twilio In Ten
Minutes":http://asymmetrical-view.com/2011/02/20/twilio-in-ten-minutes.html


h1. Philly Lambda Talk April 2011

h2. Instant Cloud Based Telephony Applications with Twilio and Heroku

Using Services that did not exist 5 years ago, you can now build Interactive
Voice Response and interactive SMS applications easily and quickly.  Twilio 
provides the hooks into the Phone and SMS networks and Heroku lets you run
the back-end for little to no cost.

  Heroku: 2007
  Twilio: 2009(?) 2007(?)

In this talk I'll talk about the business need that lead us down the path of
creating our own IVR prototyping environment, how the services and technology
all fits together.  Finally I'll provide you with and walk you through my
framework for state machine based IVR application development.

h3. Title Slide

Just add Water: Instant Cloud Based Telephony Applications with Twilio and Heroku

h3. IVR

  Interactive Voice Response System

  Telephony Application

  Audio 'Menu'

h3. What is Twilio?

Cloud based telephony.

Integration between the phone system and webhooks.

TWML over HTTP.

Sign up for a $30 credit.  Good for 3k mins in the sandbox!

Not free, but...hold on, for a good long time that's free.

h3. What is Heroku?

PaaS.  Platform as a Service.

They host and run Rails apps.  Smallest account is free.  FREE!

Comes with 5mb of DB for free!

This is more than enough for prototyping.

h3. What did Relay want?

We have a 'for real' IVR vendor.  They handle things at _scale_ and are very
robust, reliable and integrate with partner organizations.

We wanted to test out changes to see the effect on:

 - call length (we're charged by the 6s block)
 - error input rates
 - adoption rate
 - just how it sounds

Some of this is standard A/B testing.  

h3. Why did we want it?

 [PIC OF MONEY]
 [PIC OF A CLOCK]

The IVR Vendor needed 24hrs to turn around changes, they charged us $$ to do
the prototypes, and we had to spend time documenting the flows before they
could be implemented and have the voice recording done.

We just wanted to play with the different flows before we committed to sending
them to the real IVR.

h3. What did we build: Diagram

  Cell/Land Phone  --> Twilio  --> [webhook] --> Heroku (your rails app)

h3. So how do you do this?

When someone calls your app, either in the sandbox or a phone number you lease,
Twilio makes an HTTP request to a URL you provide.

h3. TWML

In response, they expect you to provide an XML document in TWML : Twilio Markup
Language.

In TWML, you can do things like: speak text, play an mp3, ask for input, record
the caller's voice, send an sms, forward the call to another number, conference
the call with other phone numbers and, of course, hang up.

h3. TWML

Simple say / gather example



Our flows started out pertty simple.  Then as product saw that they could
request a change, they rapidly got the courage to ask for more and more complex
interactions.

h3. Newflow: Ruby State Machine Library

So I integrated a full state machine into the frameowrk.

Because I have a hard time tracing the states in my head, I used Newflow's
dotty rendering feature.

h3. Web Console

Because calling my app with a phone and pressing buttons took too long, I built a
web console where I could interact with the state machine vai the browser and
test the same flow w/o having to call.

